C51 COMPILER V9.60.0.0   MAIN                                                              03/11/2023 20:51:27 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /* ********************************************************************
   2          FILE                   : main.c
   3          
   4          PROGRAM DESCRIPTION    : Program for the 8051/8052 with I2C interface to EEPROM module 24C04
   5                                    (Application Task) to write data in EEPROM and read th written data in LCD using
             - 4 bit interface. 
   6                                                   
   7             
   8          AUTHOR                : K.M. Arun Kumar alias Arunkumar Murugeswaran
   9             
  10          KNOWN BUGS            : 
  11          
  12          NOTE                  :                   
  13                                              
  14          CHANGE LOGS           : 
  15          
  16          *****************************************************************************/
  17          
  18          #include "main.h"
  19          
  20          
  21          /*------------------------------------------------------------*-
  22          FUNCTION NAME  : main
  23          
  24          DESCRIPTION    :          
  25                          
  26          INPUT          : none
  27          
  28          OUTPUT         : 
  29          
  30          NOTE           : 
  31          -*------------------------------------------------------------*/
  32          
  33          void main(void)
  34          {
  35   1        
  36   1        /* ========= begin : USER CODE INITIALIZE ========== */
  37   1         ERROR_LED = 0;         //output for MCU
  38   1         UART_Init();     
  39   1         Reset_Transfer_Parameters();
  40   1         strcpy(i2c_datas.i2c_tx_data_str, "Hello");
  41   1         UART_Tx_Str("EEPROM Written: ");
  42   1         UART_Tx_Str(i2c_datas.i2c_tx_data_str);
  43   1         UART_Tx_Str("\r\n");
  44   1         I2C_Send_Str(I2C_24C02_EEPROM_DATA_ADDR, i2c_datas.i2c_tx_data_str);  
  45   1         Delay_in_Milli_Sec(50);
  46   1         I2C_Read_Str(I2C_24C02_EEPROM_DATA_ADDR);  
  47   1         UART_Tx_Str("EEPROM Retrieved: ");
  48   1         UART_Tx_Str(i2c_datas.i2c_rcvd_data_str);
  49   1         UART_Tx_Str("\r\n");
  50   1         Delay_in_Milli_Sec(50);
  51   1         ERROR_LED = STATE_OFF;
  52   1         /* ========= end : USER CODE INITIALIZE ========== */     
  53   1           while(1) // Super Loop
C51 COMPILER V9.60.0.0   MAIN                                                              03/11/2023 20:51:27 PAGE 2   

  54   1           {
  55   2              
  56   2           }
  57   1         return; 
  58   1      }
  59          
  60          /*------------------------------------------------------------*
  61          FUNCTION NAME  : Delay_in_Micro_Sec
  62          
  63          DESCRIPTION    :
  64                          
  65          INPUT          : 
  66          
  67          OUTPUT         : 
  68          
  69          NOTE           : 
  70          
  71          Func ID        :   
  72          -*------------------------------------------------------------*/
  73          void Delay_in_Micro_Sec(const unsigned long num_micro_seconds)
  74          {
  75   1        unsigned int i = 0;
  76   1        
  77   1        for (i = 0;  i < num_micro_seconds; ++i);
  78   1        return;   
  79   1      }
  80          
  81          /*------------------------------------------------------------*
  82          FUNCTION NAME  : Delay_in_Milli_Sec
  83          
  84          DESCRIPTION    :
  85                          
  86          INPUT          : 
  87          
  88          OUTPUT         : 
  89          
  90          NOTE           :  mSec Delay 11.0592 Mhz 
  91          
  92          Func ID        :   
  93          -*------------------------------------------------------------*/
  94          void Delay_in_Milli_Sec (unsigned long int count) 
  95          {  
  96   1         
  97   1          unsigned int i;             // Keil v7.5a 
  98   1      
  99   1          while(count) 
 100   1          {
 101   2              i = 110; 
 102   2        while(i>0) i--;
 103   2              count--;
 104   2          }
 105   1      }
 106          
 107          /*------------------------------------------------------------*
 108          FUNCTION NAME  : Delay_Time_By_Count
 109          
 110          DESCRIPTION    :
 111                          
 112          INPUT          : 
 113          
 114          OUTPUT         : 
 115          
C51 COMPILER V9.60.0.0   MAIN                                                              03/11/2023 20:51:27 PAGE 3   

 116          NOTE           : 
 117          
 118          Func ID        :    
 119          -*------------------------------------------------------------*/
 120          void Delay_Time_By_Count(long count_val)
 121          {
 122   1         while(count_val--);
 123   1         return;
 124   1      }
 125          
 126          /*------------------------------------------------------------*-
 127          FUNCTION NAME  : Write_Bit_in_Data
 128          
 129          DESCRIPTION     : write bit valve to data's bit, without affecting other bits of data .
 130                          . 0 is the least bit pos and 7 is the most bit pos 
 131          
 132          INPUT          : 
 133          
 134          OUTPUT         : none
 135          
 136          NOTE           : 
 137          -*------------------------------------------------------------*/
 138          void Write_Bit_in_Data(unsigned int *const data_ptr, const unsigned int bit_pos, const unsigned int set_bi
             -t_val )
 139          {
 140   1          /* unsigned int bit_pos_data_val = 0x01; // 00000001
 141   1         
 142   1            // Left shift appropriate number of places,    so for bit_pos = 2, then bit_pos_data_val = 00000100 /
 143   1            bit_pos_data_val <<= bit_pos;
 144   1           // If we want 1 to be written at this bit_pos of data
 145   1           if (set_bit_val == 1)
 146   1           {
 147   1            // set 1 to bit_pos and all other bits of data are unchanged 
 148   1              *data |= bit_pos_data_val; 
 149   1              return;
 150   1           }
 151   1            // If we want 0 bit value at bit_pos, then only that bit_pos of data is set to 0   and all other bit
             -s of data are unchanged. /
 152   1           bit_pos_data_val = ~bit_pos_data_val; // Complement
 153   1           // if bit_pos = 2, then  bit_pos_data_val= 11111011 /
 154   1         // Bitwise AND 
 155   1           *data &= bit_pos_data_val; */
 156   1         
 157   1         if (set_bit_val == 1)
 158   1              Set_Bit_in_Data(data_ptr, bit_pos);
 159   1           else
 160   1             Clear_Bit_in_Data(data_ptr, bit_pos ); 
 161   1         return;
 162   1      }
 163          
 164          /*------------------------------------------------------------*
 165          FUNCTION NAME  : Str_Fill_Char
 166          
 167          DESCRIPTION    :
 168                          
 169          INPUT          : 
 170          
 171          OUTPUT         : 
 172          
 173          NOTE           : 
 174          
 175          Func ID        :    
C51 COMPILER V9.60.0.0   MAIN                                                              03/11/2023 20:51:27 PAGE 4   

 176          -*------------------------------------------------------------*/
 177          unsigned int Str_Fill_Char(char *const dest_str, const unsigned char num_chars, const char fill_char)
 178          {
 179   1        unsigned char index;
 180   1        
 181   1        if(dest_str == NULL_PTR || num_chars > STR_MAX_NUM_CHARS)
 182   1        {
 183   2          UART_Tx_Str("ERR: Str_Fill\r");
 184   2          return ERR_INVALID_DATA;
 185   2        }
 186   1        for (index = 0 ; index < num_chars ; ++index)
 187   1           *(dest_str + index)  = fill_char;
 188   1          *(dest_str + index) = NULL_CHAR;
 189   1        
 190   1        return SUCCESS;
 191   1      }
 192          
 193          /*------------------------------------------------------------*
 194          FUNCTION NAME  : Interrupt_Init
 195          
 196          DESCRIPTION    :
 197                          
 198          INPUT          : 
 199          
 200          OUTPUT         : 
 201          
 202          NOTE           : 
 203          
 204          Func ID        :   
 205          -*------------------------------------------------------------*/
 206          void Global_Interrupt_Enable()
 207          {
 208   1        EA = 1;
 209   1          return;   
 210   1      }
 211          /*------------------------------------------------------------------*-
 212            ---- END OF FILE -------------------------------------------------
 213          -*------------------------------------------------------------------*/   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    412    ----
   CONSTANT SIZE    =     60    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      24
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
