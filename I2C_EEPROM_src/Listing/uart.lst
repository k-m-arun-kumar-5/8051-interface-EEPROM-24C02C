C51 COMPILER V9.60.0.0   UART                                                              03/11/2023 20:51:27 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE uart.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\uart
                    -.lst) TABS(2) OBJECT(.\Objects\uart.obj)

line level    source

   1          /* ********************************************************************
   2          FILE                 : uart.c
   3          
   4          PURPOSE              : 
   5             
   6          AUTHOR               : K.M. Arun Kumar alias Arunkumar Murugeswaran
   7             
   8          KNOWN BUGS           : 
   9          
  10          NOTE                 :                
  11          
  12          CHANGE LOGS          :
  13          
  14          *****************************************************************************/
  15          
  16          #include "main.h"
  17          
  18          // ------  data type declarations ---------------------------
  19          
  20          // ------  function prototypes ------------------------------
  21          static void UART_Rx_Char_Proc();
  22          
  23          // ------  constants ----------------------------------------
  24          
  25          
  26          // ------  variables ----------------------------------------
  27          uart_data_t uart_data;
  28          
  29          
  30          /*------------------------------------------------------------*-
  31          FUNCTION NAME  : UART_Init
  32          
  33          DESCRIPTION    : Initialize UART port            
  34          
  35          INPUT          : 
  36          
  37          OUTPUT         : 
  38          
  39          NOTE           : 
  40          -*------------------------------------------------------------*/
  41          void UART_Init(void)
  42          {
  43   1        #ifdef UART_EVENT == INTERRUPT
*** WARNING C323 IN LINE 43 OF uart.c: newline expected, extra characters found
  44   1          Global_Interrupt_Enable();
  45   1          ES = 1; //serial Interrupt_Enable
  46   1        #endif
  47   1        
  48   1        SCON = 0x50;    // setup serial port control 
  49   1          TMOD = 0x20;    // hardware (9600 BAUD @11.0592MHZ) 
  50   1          TH1  = 0xFD;    // TH1
  51   1          TR1  = 1;     // Timer 1 on
  52   1        
  53   1        UART_Reset_Datas(UART_RESET_ALL_DATAS); 
C51 COMPILER V9.60.0.0   UART                                                              03/11/2023 20:51:27 PAGE 2   

  54   1        Delay_in_Milli_Sec(1);  
  55   1        return;
  56   1      }
  57          
  58          /*------------------------------------------------------------*-
  59          FUNCTION NAME  : UART_Reset_Datas
  60          
  61          DESCRIPTION    :           
  62          
  63          INPUT          : 
  64          
  65          OUTPUT         : 
  66          
  67          NOTE           : 
  68          -*------------------------------------------------------------*/
  69          void UART_Reset_Datas(const unsigned char uart_reset_type)
  70          {
  71   1        switch(uart_reset_type)
  72   1        {
  73   2          case UART_RESET_ALL_DATAS:
  74   2          case UART_RESET_ALL_RCVD_DATAS:
  75   2              uart_data.rcvd_ready_flag = STATE_YES;         
  76   2              uart_data.echo_rcvd_data_flag = STATE_YES;
  77   2          case UART_RESET_READ_DATA:
  78   2              uart_data.read_flag = STATE_YES;  
  79   2          case UART_RESET_RCVD_BUFFER:    
  80   2                Str_Fill_Char(uart_data.rcvd_str, STR_MAX_NUM_CHARS ,NULL_CHAR); 
  81   2                uart_data.rcvd_str_num_chars = 0;
  82   2              uart_data.rcvd_overflow_flag = STATE_NO;
  83   2              uart_data.rcvd_char = NULL_CHAR;
  84   2              uart_data.rcvd_terminator_char_flag = STATE_NO;      
  85   2          if(uart_reset_type != UART_RESET_ALL_DATAS)
  86   2              break;
  87   2          case UART_RESET_ALL_TX_DATAS:
  88   2                  uart_data.tx_ready_flag = STATE_YES;
  89   2          break;  
  90   2          
  91   2        }
  92   1        return;
  93   1      }
  94          /*------------------------------------------------------------*-
  95          FUNCTION NAME  : UART_Tx_Char
  96          
  97          DESCRIPTION    : Transmit Char by polling          
  98          
  99          INPUT          : 
 100          
 101          OUTPUT         : 
 102          
 103          NOTE           : 
 104          -*------------------------------------------------------------*/
 105          void UART_Tx_Char(const char tx_char)
 106          {
 107   1        if(uart_data.tx_ready_flag == STATE_YES)
 108   1        {
 109   2          SBUF = tx_char;
 110   2          uart_data.tx_ready_flag = STATE_NO; 
 111   2          if(UART_EVENT == POLLING)
 112   2          {     
 113   3                 while (TI==0); //Transmit Char by polling 
 114   3                 TI = 0;
 115   3               uart_data.tx_ready_flag = STATE_YES; 
C51 COMPILER V9.60.0.0   UART                                                              03/11/2023 20:51:27 PAGE 3   

 116   3          }
 117   2        }   
 118   1        return; 
 119   1      }
 120          
 121          /*------------------------------------------------------------*-
 122          FUNCTION NAME  : UART_Tx_Str
 123          
 124          DESCRIPTION    : Transmit String by polling          
 125          
 126          INPUT          : 
 127          
 128          OUTPUT         : 
 129          
 130          NOTE           : 
 131          -*------------------------------------------------------------*/
 132          void UART_Tx_Str(const char *const tx_str)
 133          {
 134   1           unsigned char index;
 135   1         
 136   1           for(index = 0; ((*(tx_str + index)) != NULL_CHAR); index++)
 137   1            UART_Tx_Char(*(tx_str + index));      
 138   1         return; 
 139   1      }
 140          
 141          #ifdef UART_EVENT == INTERRUPT
*** WARNING C323 IN LINE 141 OF uart.c: newline expected, extra characters found
 142          /*------------------------------------------------------------*-
 143          FUNCTION NAME  : Serial_ISR 
 144          
 145          DESCRIPTION    : UART by Interrupt         
 146          
 147          INPUT          : 
 148          
 149          OUTPUT         : 
 150          
 151          NOTE           : 
 152          -*------------------------------------------------------------*/
 153          void Serial_ISR(void) interrupt 4
 154          {
 155   1        if(TI == 1)
 156   1        {
 157   2            TI = 0;           //clear uart transmit flag
 158   2            uart_data.tx_ready_flag = STATE_YES; 
 159   2        }
 160   1        if(RI == 1)
 161   1        {
 162   2          uart_data.rcvd_ready_flag = STATE_NO; 
 163   2          uart_data.rcvd_char = SBUF; 
 164   2          UART_Rx_Char_Proc();    
 165   2          RI = 0; //clear uart receive flag   
 166   2        }
 167   1      } 
 168          
 169          #else
              /*------------------------------------------------------------*-
              FUNCTION NAME  : UART_Rx_Char
              
              DESCRIPTION    : Receive Char by polling         
              
              INPUT          : 
              
C51 COMPILER V9.60.0.0   UART                                                              03/11/2023 20:51:27 PAGE 4   

              OUTPUT         : 
              
              NOTE           : 
              -*------------------------------------------------------------*/
              char UART_Rx_Char()
              {
                if(uart_data.rcvd_str_num_chars + 1 >= STR_MAX_NUM_CHARS )
                {
                  uart_data.rcvd_overflow_flag = STATE_YES;
                  return NULL_CHAR;
                }
                uart_data.rcvd_overflow_flag = STATE_NO;
                if(uart_data.rcvd_ready_flag == STATE_YES ) 
                {
                    uart_data.rcvd_ready_flag = STATE_NO; 
                      while (RI==0);
                      uart_data.rcvd_char = SBUF;
                    UART_Rx_Char_Proc();
                    RI = 0;   
                  return(uart_data.rcvd_char);    
                }
                return NULL_CHAR;   
              }
              #endif
 201          
 202          #ifdef PROJECT_NOT_REQUIRED
              /*------------------------------------------------------------*-
              FUNCTION NAME  :  
              
              DESCRIPTION    :         
              
              INPUT          : 
              
              OUTPUT         : 
              
              NOTE           : 
              -*------------------------------------------------------------*/
              unsigned int UART_Read(const char **const read_str_ptr, const unsigned char *read_num_chars_ptr)
              {
                if(read_str_ptr == NULL_PTR || read_num_chars_ptr == NULL_PTR)
                {
                  return ERR_NULL_PTR;
                }
                *read_str_ptr = uart_data.rcvd_str;
                read_num_chars_ptr = &uart_data.rcvd_str_num_chars; 
                  
                return SUCCESS;
              }
              /*------------------------------------------------------------*-
              FUNCTION NAME  :  UART_Rx_Char_Proc
              
              DESCRIPTION    :         
              
              INPUT          : 
              
              OUTPUT         : 
              
              NOTE           : 
              -*------------------------------------------------------------*/
              static void UART_Rx_Char_Proc()
              {
                uart_data.read_flag = STATE_NO;
C51 COMPILER V9.60.0.0   UART                                                              03/11/2023 20:51:27 PAGE 5   

                if(uart_data.rcvd_str_num_chars + 1 < STR_MAX_NUM_CHARS)
                {
                   uart_data.rcvd_overflow_flag = STATE_NO;
                       switch(uart_data.rcvd_char)
                   {
                            case BACKSPACE_CHAR:
                           if(uart_data.rcvd_str_num_chars > 0)
                         {
                            if(uart_data.echo_rcvd_data_flag == STATE_YES)
                                   UART_Tx_Char(uart_data.rcvd_char);
                             uart_data.rcvd_str[uart_data.rcvd_str_num_chars--] = NULL_CHAR;
                         }
                      break;
                            case TERMINATOR_CHAR:
                         if(uart_data.echo_rcvd_data_flag == STATE_YES)
                              UART_Tx_Char(uart_data.rcvd_char);
                               uart_data.rcvd_terminator_char_flag = STATE_YES;
                            break;
                            default:
                        if(uart_data.echo_rcvd_data_flag == STATE_YES)
                             UART_Tx_Char(uart_data.rcvd_char);
                        uart_data.rcvd_terminator_char_flag = STATE_NO; 
                          uart_data.rcvd_str[uart_data.rcvd_str_num_chars++] = uart_data.rcvd_char;
                   }
                }
                else
                      uart_data.rcvd_overflow_flag = STATE_YES;
                uart_data.rcvd_ready_flag = STATE_YES;
                
                  return;      
              } 
              #endif   
 271          /*-------------------------------------------------------------------
 272            ------------------------ END OF FILE ------------------------------
 273          -------------------------------------------------------------------*/
 274          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    225    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     34       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
